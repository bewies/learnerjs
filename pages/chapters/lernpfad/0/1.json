{
    "page": {
        "title": "Maxims JavaScript-Einstieg",
        "prevPage": "https://google.de",
        "nextPage": "https://google.de"
    },
    "head": {
        "title": "Selektoren",
        "text": "Ein HTML-Dokument besteht aus Elementen, die wiederum Elemente enthalten, oder aber Text. Um ein HTML-Element mit JavaScript zu manipulieren, musst du dem Programm verständlich machen, welches Element du meinst. Hier kommen Selektoren ins Spiel. Sie wählen HTML-Elemente aus, dessen Eigenschaften dann manipuliert oder abgefragt werden können."
    },
    "body": [
        {
            "intro": {
                "title": "Inhalt manipulieren",
                "text": "Eine Kernfunktion von JavaScript ist, die Inhalte sich verändern zu lassen. Um das zu erreichen müssen wir dem Computer sagen können, welches Element wir ansprechen, dessen Inhalt manipuliert werden soll."
            },
            "segments": [
                {
                    "title": "Mit Id ansprechen",
                    "contents": [
                        {
                            "type": "text",
                            "text": "Nehmen wir an, wir haben folgendes HTML-Markup:"
                        },
                        {
                            "type": "code",
                            "text": "&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Document&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div <yellow>id</yellow>=<purple>\"demo\"</purple>&gt;Mein erster Inhalt&lt;/div&gt;\n        &lt;script&gt;\n            ...\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;"
                        },
                        {
                            "type": "text",
                            "text": "Man bemerke, wir haben ein Element mit der ID \"demo\". Das können wir jetzt nicht nur über CSS ansprechen und ihm einen Style verleihen, sondern genauso mit JavaScript. Geben wir ihm den Inhalt \"Mein zweiter Inhalt!\". Dazu ist folgendes JavaScript nötig: "
                        },
                        {
                            "type": "code",
                            "text": "<green>// Das Element auswählen (mit Selektor)</green>\n<y>document</y>.getElementById(<purple>\"demo\"</purple>).innerHTML = <purple>\"Mein zweiter Inhalt!\"</purple>;"
                        },
                        {
                            "type": "text",
                            "text": "Wir suchen im Element <span class=\"bold\">document</span>, also überall, nach dem Element mit der <span class=\"bold\">ID</span> \"demo\" und setzen seine <span class=\"bold\">Property</span> (Eigenschaft) \"innerHTML\", also alles HTML, das drin ist in dem Element auf \"Mein zweiter Inhalt\"."
                        }
                    ]
                },
                {
                    "title": "Fehler in der Reihenfolge",
                    "type": "warning",
                    "contents": [
                        {
                            "type": "text",
                            "text": "Der Code wird nun beim Laden des Dokumentes ausgeführt, also muss das Script-Element nach dem div#demo stehen. Ansonsten würde er das Element nicht finden und folgenden Fehler ausgeben:"
                        },
                        {
                            "type": "imgH",
                            "text": "Fehler, bei falscher Reihenfolge",
                            "src": "./assets/errorOrder.png"
                        },
                        {
                            "type": "text",
                            "text": "Dieser Fehler entsteht ganz schnell, lässt sich aber auch schnell lösen. Steht das Script nämlich vor dem zu findenden Element, dann wird es nicht gefunden. Dem Skript ist nur alles bekannt, was über ihm ist, denn das Dokument wird von oben nach unten gelesen. Normalerweise schreibt man die Scripts in den HEAD, was zur Folge hat, dass dann noch garnichts geladen ist, was den Inhalt betrifft. Der Trick ist, dass man das alles in eine Funktion schreibt und diese Funktion nach dem Laden des Dokuments aufruft. So ist garantiert, dass alles vorher geladen ist.<br>Doch, da wir noch nicht in der Lage sind, das zu tun, schreiben wir unsere Skripts schön akkurat an das Ende des Dokuments."
                        }
                    ]
                },
                {
                    "title": "Mit Class ansprechen",
                    "contents": [
                        {
                            "type": "text",
                            "text": "Der Class-Selektor <inlinecode>getElement<blue>s</blue>ByClassName()</inlinecode> funktioniert sehr ähnlich, wie der Id-Selektor. Der Input ist der Klassenname, nach dem gesucht wird. Doch aufgepasst: Mehrere Elemente können eine Klasse haben. Also wird eine Liste von Elementen zurückgegeben. Selbst, wenn nur ein oder gar kein Element gefunden wird, gibt er eine Art Liste namens <span class=\"bold\">HTML-Collection</span> zurück."
                        }
                    ]
                }
            ]
        }
    ]
}